[["index.html", "My First Steps in Neuronal Networks Chapter 1 About 1.1 Me 1.2 The Book 1.3 How it works", " My First Steps in Neuronal Networks Axel Roth 2021-11-06 Chapter 1 About 1.1 Me Hello, my name is Axel Roth and at the moment im studieing math at a master degree. In the same moment im working half-time in the finance field and programming in a wide range of tasks like index replication, factormodels, data visualisation, datamanagement, shiny applications, documantations with rmarkdown, building internal packages and much more. So the most of my experiece i gained was around R and all its features. And now the iterresting question Why do i want to write a beginners guide in the field of Neuronal Networks? Its simple, at the moment i have a lecture in that we learn how to programm a Neuronal Network from scratch with basic packages from python and i want to share my experience. Additionaly i learned all i know from free sources of the internet and thats why i want to give something back. Furthermore its a good use-case to write my first things in english and test the fancy Bookdown and GitBook features. 1.2 The Book This Book will be more or the less the documentation of my lecture Finance Project in that we learn to programm a simple Perceptron (the simplest Neuronal Network) and then we will continue with a multi layer perceptron and finish with a slight insight into decision trees. On this journey, we will test the Neuronal Network in different examples that are easy to reproduce. Because these are my first steps in this field, i need to appolagice for my terrible spelling and cant guarantee you the best quality, but maybe this is the best way to educate and attract unexperienced readers to have a look into this field. 1.3 How it works Im coding this book in the IDE R-Studio with the framework of Bookdown and embed python code that is made possible by the reticulate package. Thats why i need to load the python interpreter in the following R-chunk: library(reticulate) Sys.setenv(RETICULATE_PYTHON = &quot;D:\\\\WinPython2\\\\WPy64-3950\\\\python-3.9.5.amd64\\\\&quot;) Additionaly im using a fully portable version of R-Studio, R and python. Its nice to have if you want to switch for example between university PCs and your own. R-Studio supports it and python can be downloaded via WinPython to be fully portable. "],["a-single-perceptron.html", "Chapter 2 A single Perceptron 2.1 Neural Network Basics", " Chapter 2 A single Perceptron In this chapter i will teach you how to code a single Perceptron in Python with more or the less only the numpy package. Numpy uses a vectorizible math structure in which you can easily calculate elementwise or do stuff like normal matrix multiplications with just a symbol (i always interprete Vectors as one dimensional matrixes!). At the most of the times its just translating math formulars into python code without changing its structure. First of all we are starting with the needed parameters, that are explained later: Number of runs over the training data := train_n Learning rate := \\(\\alpha =\\) alpha and the activation function: \\[ step(s)= \\begin{cases} 1,&amp; s \\geq 0\\\\ 0,&amp; s &lt; 0 \\end{cases} \\] or as python code: def step(s): if( s &gt;= 0 ): return(1) else: return(0) This function is named the heavyside-function and should be the easiest activation function to start with. The traings dataset is the following: \\[ \\left[ \\begin{array}{cc|c} x_i,_1 &amp; x_i,_2 &amp; y_i \\\\ \\end{array} \\right] \\] \\[ \\left[ \\begin{array}{cc|c} 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 1 \\\\ 1 &amp; 0 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 \\\\ \\end{array} \\right] \\] The provided traings dataset contains the X_train matrix with two inputs each scenario and the Y_train matrix with the correct output. If your looking exactly you can see that this is the OR-Gate. Later you will see why these type of problems are the only suitable things to do with a single neuron. For a wider use we will now change the X_train matrix a little bit by adding a column with ones on the left side of it. Now you will not understand but later you will. In short, its a dummy value to make it possible to shift the NN, so it can be better fitted. The new traings dataset looks like this: \\[ \\left[ \\begin{array}{ccc|c} x_i,_0 &amp; x_i,_1 &amp; x_i,_2 &amp; y_i \\\\ \\end{array} \\right] \\] \\[ \\left[ \\begin{array}{ccc|c} 1 &amp; 0 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 &amp; 1 \\\\ 1 &amp; 1 &amp; 0 &amp; 1 \\\\ 1 &amp; 1 &amp; 1 &amp; 1 \\\\ \\end{array} \\right] \\] The needed python imports and default options are the following: import numpy as np import random as ra import pandas as pd import matplotlib.pyplot as pyplot pd.set_option(&#39;display.max_rows&#39;, 500) pd.set_option(&#39;display.max_columns&#39;, 500) pd.set_option(&#39;display.width&#39;, 1000) ( Do you see more imports than only the numpy package? Yes or No ) Now that we have all the needed parameters and settings, i can give you a quick overview of the algorithm. 2.1 Neural Network Basics In a NN we are having two basic parts, the forward pass and backward pass. In the forward pass we are calculating the weighted sum of each input with its weights of the layer to get the output. In the backward pass we are analysing the error to adjust the weights accordingly. This is it! This is all a NN will do. Now that you know, see you. I explained everything to you. Have a good life Ahh no no ok we have a look deeper into it :) Whats exactly is the forward pass in a single Perceptron? Its just the weighted sum like i said, so you have with the dimensions included for one scenario out of the traingdata the folowing: \\[ step(W^{(1,3)} \\cdot x^{(3,1)}) = y^{(1,1)} \\] That is the normal approach to iterate over all scenarios in the trainingdata But i think its not the right way to describe it because it gets very confusing to interpret it for all scenarios. My next approach is to consider all scenarios in the trainingdata in one formular. If your data isnt that huge, its a much faster approach aswell. First of all we need to interpret the new dimensions of \\(W\\) and \\(X\\). We have \\(X\\) as: \\[ X = \\left[ \\begin{array}{ccc} 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 \\\\ 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 1 &amp; 1 \\\\ \\end{array} \\right] \\] each row describes the inputs for each neuron. For the weights \\(W\\) we have for example: \\[ W =\\left[ \\begin{array}{c} 0.1 \\\\ 0.2 \\\\ 0.3 \\\\ \\end{array} \\right] \\] The new formular looks like this: \\[ step(X \\cdot W) = Y \\] For example if you take a look at the first row or rather scenario of \\(X\\) you will see the folowing: \\[ Y_0 = step([X_0,_0 \\cdot W_0,_0 + X_0,_1 \\cdot W_1,_0 + X_0,_2 \\cdot W_2,_0]) \\] and \\(Y_0\\) is the approximated output of the first scenario. Now we can look at the NN in one scenario and can check if it is what we want to do: with \\(x_{i}\\) as the inputs, \\(y_{i}\\) as the outputs and \\(W_{i}\\) as the weights of the layer \\(i\\). Now we create the so called forward() function in python: def forward(W, x): return( step(W @ x) ) X_train = np.array([ [1,0,0], [1,0,1], [1,1,0], [1,1,1], ]) W_0 = np.array([ [0.1], [0.2], [0.3] ]) "],["prerequisites.html", "Chapter 3 Prerequisites", " Chapter 3 Prerequisites This GitBook is created in Rstudio, using the bookdown package. To get your system set up correctly, you have to install several software packages, and register on GitHub. You only have to perform these steps once, and the entire process should take approximately 1 hour if you start from scratch. In case some software is already installed on your system, you can skip related steps. Follow these steps in order: Install R from cloud.r-project.org Install Rstudio Desktop (Free) from rstudio.com Install Git from git-scm.com. Use the default, recommended settings. It is especially important to leave these settings selected: Git from the command line and also from third party software Use the OpenSSL library Checkout Windows-style, commit Unix-style line endings Enable Git Credential Manager If you run into any trouble, a more comprehensive tutorial on installing Git is available at happygitwithr.com. Register on GitHub Go to https://github.com/ and click Sign up. Choose an Individual, Free plan. Request a free academic upgrade. This allows you to create private repositories, which are only visible to you and selected collaborators, and can be made public when your work is published. Connect Rstudio to Git and Github (for more support, see this Rstudio article, and this blog post) Open Rstudio, open the Tools menu, click Global Options, and click Git/SVN Verify that Enable version control interface for RStudio projects is selected Verify that Git executable: shows the location of git.exe. If it is missing, manually fix the location of the file. Click Create RSA Key. Do not enter a passphrase. Press Create. A window with some information will open, which you can close. Click View public key, and copy the entire text to the clipboard. Close Rstudio (it might offer to restart by itself; this is fine) Go to https://github.com Click your user icon, click Settings, and then select the SSH and GPG keys tab. Click New SSH key. Give it an arbitrary name (e.g., your computer ID), and paste the public key from your clipboard into the box labeled Key. Open Rstudio again (unless it restarted by itself) Install all required packages by running the following code in the Rstudio console. Be prepared for three contingencies: If you receive any error saying There is no package called XYZ, then run the code install.packages(\"XYZ\") If you are prompted to update packages, just press 3: None. Updating packages this way in an interactive session sometimes leads to errors, if the packages are loaded. If you see a pop-up dialog asking Do you want to install from sources the package which needs compilation?, click No. If this leads to errors, then please follow Step 3 from this online guide, and run install.packages(\"devtools\"). This will take a long time, but will allow you to install packages from source. Run the following code to install the required packages: install.packages(&quot;bookdown&quot;) install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() git2r::config(global = TRUE, user.name = &quot;your.name&quot;, user.email = &quot;your.email&quot;) Thats it! Everything should be installed and connected now. "],["getgitbook.html", "Chapter 4 Get your GitBook", " Chapter 4 Get your GitBook To get your GitBook, you should follow these steps: Go to https://github.com/cjvanlissa/gitbook-demo In the top right of the page, click Fork. This will copy my gitbook-demo repository to your GitHub account. My repository is now copied to your account. It is a template repository, which means that you can create a new repository based on this one. Create a new repository for your own GitBook. Create one for a course youve been wanting to update. In the top-right corner of the GitHub website, click the + icon, and select New repository: In the dialog, select the gitbook-demo as Repository template, and give the repository an appropriate name for your course. Then, press Create repository: Now, go back to Rstudio on your computer. In Rstudio, click File &gt; New Project. A dialog will open. If you set up Rstudio with Git correctly, the dialog should have an option to create a new project from Version control. Click it: In the next dialog window, you should copy the URL of the GitHub repository you created in Step 5, like so: Now, in Rstudio, you can open files for editing and create new files (explained in the next Chapter). Open files by clicking them in the Files editor (usually in the bottom right of Rstudio): After you make a change, it will show up in the Git tab (usually in the top right of Rstudio). You must Commit the change locally, and then Push the change to GitHub to update your repo. To Commit, select the file and click the Commit button. Write a short message to describe the changes you made, then click the Commit button again. Now, press Push to send your commits to GitHub. To render your book as a GitBook, you must Build it. In the top-right panel of Rstudio, you see a Build tab. In this tab, simply click the Build Book button to build your book. You should see a lot of rendering messages, until a window pops up with your brand new GitBook. If you get errors at this stage, you probably made a mistake in preparing your system (see the previous Chapter). Building the book generated a lot of new files in the ./docs directory. This directory contains the website files for your GitBook. Open the Git tab again, verify that the ./docs directory is listed, and Commit and Push all of these new files as described in Step 9. There is only one last remaining task: To publish your GitBook on GitHub pages. Once you do this, any change to the ./docs folder that you push to GitHub will lead to an immediate update of your GitBook website. Go back to the GitHub page for your Repository. Click on the Settings tab on the top right of the page: On the Settings page, scroll all the way down until you reach a section called GitHub Pages. There, under the Source heading, click the word None, and select master branch /docs folder. When you select it, the page will update, and if you scroll back down to the GitHub Pages section, you will see the URL where your GitBook is published. The first time, it will take a few minutes for your GitBook to come online. When you publish updates to the GitBook however (simply by following Step 11 again), the update will be near-instantaneous. The Pages section should now look like this (and that is hopefully the link where you found this book): "],["editing-the-book.html", "Chapter 5 Editing the book 5.1 Creating new chapters 5.2 Linking across chapters 5.3 Advanced editing", " Chapter 5 Editing the book The contents of the book are written in RMarkdown. You can use any formatting code that Pandocs Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). Moreover, you can include chunks of R-code, like this: ```{r} print(\"This is an R-command!\") ``` The results of these chunks can be rendered to the GitBook: ## [1] &quot;This is an R-command!&quot; To edit the book, you can change the text in the .Rmd files. Each Rmd file should contain one and only one chapter. A chapter is defined by the first-level heading #, e.g., # Editing the book. Any sub-headings within the chapter are indicated with several # signs, e.g., ## (level 2) and ### (level 3). 5.1 Creating new chapters To create a new chapter, you must follow two steps: 1) Create the file, and 2) Include it in the list of chapters. First, to create the file for a new chapter in Rstudio, click File &gt; New File &gt; Text file. At the top of the file, write your chapter heading, as explained above. Then, click File &gt; Save. Save the file as .Rmd, without spaces in the file name, e.g.: editing_the_book.Rmd. Second, to include it in the list of chapters, open the file _bookdown.yml (click it in the Files explorer in the bottom right of Rstudio). This file has a list of .Rmd files to be included in the book. In this example, the list looks like this: tmp &lt;- readLines(&quot;_bookdown.yml&quot;) cat(tmp[grep(&quot;^rmd_files&quot;, tmp):grep(&quot;references\\\\.Rmd&quot;, tmp)], sep = &quot;\\n&quot;) rmd_files: [index.Rmd, 00_Introduction.Rmd, prerequisites.Rmd, get_your_gitbook.Rmd, editing_the_book.Rmd, figures_tables.Rmd, examples.Rmd, open_educational.Rmd, use_in_course.Rmd, licenses.Rmd, references.Rmd] Insert the file name of your new chapter in the desired position in this list. 5.2 Linking across chapters You can label chapter and section titles using {#label} after them. The labels can be used as cross-references. For example, we can link to Chapter 6. If you do not manually label chapters, there will be automatic labels anyway, e.g., Chapter 7. 5.3 Advanced editing The convenient Rmarkdown Cheat Sheet by Rstudio covers most of the knowledge required for advanced Rmarkdown editing. You can print it out and stick it to your wall! "],["figtab.html", "Chapter 6 Figures and tables", " Chapter 6 Figures and tables Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 6.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 6.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 6.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 6.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2021) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],["examples.html", "Chapter 7 Examples 7.1 Statistics with R (H. Quene) 7.2 Theory Construction and Statistical Modeling (C. J. van Lissa) 7.3 Doing Meta-Analysis in R (C. J. van Lissa) 7.4 Métodos quantitativos em Psicologia com R (L. Anunciação)", " Chapter 7 Examples Here are some examples of other GitBooks for courses; if you want to have your GitBook added to the list, please send a Pull Request (heres how to send a pull request). 7.1 Statistics with R (H. Quene) https://hugoquene.github.io/emlar2020 A GitBook for a tutorial on Statistics with R (Basics), held as part of the workshop on Experimental Methods in Language Acquisition Research (EMLAR, https://emlar.wp.hum.uu.nl/), Utrecht, on 17 April 2020. This compact introduction helps you with your first steps into R. 7.2 Theory Construction and Statistical Modeling (C. J. van Lissa) http://cjvanlissa.github.io/TCSM A GitBook for the course Theory Construction and Statistical Modeling, with some interesting code, for example: Blocks of answers to the tutorial questions that can be collapsed and expanded. 7.3 Doing Meta-Analysis in R (C. J. van Lissa) http://cjvanlissa.github.io/Doing-Meta-Analysis-in-R A GitBook on doing meta-analysis in R, based on the book Doing Meta-Analysis in R, by Mathias Harrer, Pim Cuijpers, &amp; David Ebert, and adapted to focus on the metafor package, and exploring heterogeneity using metaforest. The original can be found here: https://bookdown.org/MathiasHarrer/Doing_Meta_Analysis_in_R/ 7.4 Métodos quantitativos em Psicologia com R (L. Anunciação) https://anovabr.github.io/mqt/ This book provides a short and to-the-point exposition on the essentials of statistics, and was written for undergraduate students at the Pontifical Catholic University of Rio de Janeiro (PUC-Rio). To a lesser degree, the mathematical modeling of statistical questions will be addressed. This book might be relevant for Portuguese-speaking students who enroll for laboratory-based statistics and anyone who wants to learn R. "],["open-educational-resources.html", "Chapter 8 Open Educational Resources", " Chapter 8 Open Educational Resources UNESCO defines Open Educational Resources as teaching, learning and research materials in any medium  digital or otherwise  that reside in the public domain or have been released under an open license that permits no-cost access, use, adaptation and redistribution by others with no or limited restrictions. Open Educational resources can help lighten the workload on individual teachers, who can collaborate with the development of high-quality open access resources, instead of having to develop their own proprietary materials from scratch. Moreover, Open Educational resources are inclusive, lowering the barrier to knowledge acquisition for learners around the world, and enabling lifelong learning for those outside academia. Many universities support Open Educational Resources. Here are just a few (feel free to send a pull request with other relevant resources). OER Commons: A freely accessible online library of open educational resources. Utrecht University Figshare: Open learning objects from Utrecht University. Johns Hopkins University OCW: Open public health courses and materials. University of Pittsburgh OER: Big List of Open Educational Resources. MERLOT: Online learning and support materials and content creation tools, led by an international community of educators, learners and researchers. "],["compatibility-with-existing-systems.html", "Chapter 9 Compatibility with existing systems 9.1 Add a hyperlink 9.2 Embed the whole book", " Chapter 9 Compatibility with existing systems Many universities offer digital platforms for learning. You might wish to embed your GitBook within these existing systems. Here are two ways in which you might do that. Currently, this section only discusses BlackBoard, but the same principles should apply to other platforms. 9.1 Add a hyperlink You can add a link to your GitBook in the BlackBoard course menu by following this tutorial. 9.2 Embed the whole book You can add a Blank Page to your BlackBoard course menu, and fill that page with a full-size iframe - a web page within the web page. This tutorial explains how to do it. It is possible that your university is blocking this feature, however. "],["license-your-gitbook.html", "Chapter 10 License your GitBook", " Chapter 10 License your GitBook In the spirit of Open Science, it is good to think about making your course materials Open Source. That means that other people can use them. In principle, if you publish materials online without license information, you hold the copyright to those materials. If you want them to be Open Source, you must include a license. It is not always obvious what license to choose. The Creative Commons licenses are typically suitable for course materials. This GitBook, for example, is licensed under CC-BY 4.0. That means you can use and remix it as you like, but you must credit the original source. If your project is more focused on software or source code, consider using the GNU GPL v3 license instead. You can find more information about the Creative Commons Licenses here. Specific licenses that might be useful are: CC0 (No Rights Reserved), everybody can do what they want with your work. CC-BY 4.0 (Attribution), everybody can do what they want with your work, but they must credit you. Note that this license may not be suitable for software or source code! For compatibility between CC and GNU licenses, see this FAQ. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
